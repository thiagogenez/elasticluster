---
#
# Mount a volume
#

- name: Does device '{{device.name}}' exists?
  ansible.builtin.command: lsblk -n -o TYPE '{{device.name}}'


- name: Create partition {{device.name}}{{device.number}} if it doesn't exist with {{device.fs_type}} filesystem
  community.general.parted:
    device: '{{device.name}}'
    number: '{{device.number}}'
    state: present
  
- name: Create a '{{device.fs_type}}' filesystem on {{device.name}}{{device.number}}
  community.general.filesystem:
    force: no
    fstype: '{{device.fs_type}}'
    dev: '{{device.name}}{{device.number}}'


- name: Check if the device {{device.name}}{{device.number}} already contains a monted volume '{{device.mountpoint}}'
  ansible.builtin.command: lsblk -n -o MOUNTPOINT '{{device.name}}{{device.number}}'
  register: already_mounted_check


- name: Sanity check for the requested path "{{device.mountpoint}}"
  fail:
    msg: Volume 'already_mounted_check.stdout_lines[0]' is already mounted and it differs from the requested "{{device.mountpoint}}"
  when: 'already_mounted_check.stdout_lines[0] is defined and already_mounted_check.stdout_lines[0] != device.mountpoint'


- name: Get the UUID of the device {{device.name}}{{device.number}} 
  ansible.builtin.command: blkid '{{device.name}}{{device.number}}' -s UUID -o value
  register: uuid_check
  when: 'already_mounted_check.stdout_lines[0] is not defined '


- name: Mount new volumes and create fstab entries
  ansible.posix.mount: 
    path: "{{device.mountpoint}}"
    src: "UUID={{uuid_check.stdout_lines[0]}}"
    fstype: "{{device.fs_type}}"
    opts: "{{device.opts}}"
    state: "mounted"
  when: uuid_check.stdout_lines[0] is defined

